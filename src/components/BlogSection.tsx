import { useState } from "react";

type Blog = {
  id: number;
  img: string;
  date: string;
  month: string;
  category: string;
  title: string;
  modalContent: string[];
  status: boolean;
};

const blogData: Blog[] = [
  {
    id: 1,
    img: "assets/img/huit.jpg",
    date: "23",
    month: "Dec",
    category: "T·ª± s·ª±",
    title: "M√¨nh ƒë√£ ch·ªçn ng√†nh h·ªçc nh∆∞ th·∫ø n√†o",
    modalContent: [
      `H·ªìi c√≤n h·ªçc l·ªõp 12, m√¨nh th·∫≠t s·ª± ch∆∞a x√°c ƒë·ªãnh r√µ s·∫Ω theo ƒëu·ªïi ng√†nh n√†o. ·ªû tu·ªïi ƒë√≥, m√¨nh th∆∞·ªùng t·ª± h·ªèi: ‚ÄúM√¨nh th√≠ch g√¨? M√¨nh c·∫ßn g√¨? V√† m√¨nh mu·ªën h·ªçc g√¨?‚Äù`,
      `Trong nhi·ªÅu suy nghƒ©, m√¨nh nh·∫≠n ra b·∫£n th√¢n r·∫•t h·ª©ng th√∫ v·ªõi nh·ªØng ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn tin h·ªçc tr√™n l·ªõp, ch·∫≥ng h·∫°n nh∆∞ l√†m PowerPoint hay Excel. Ch√≠nh ƒëi·ªÅu n√†y ƒë√£ g·ª£i cho m√¨nh m·ªôt √Ω t∆∞·ªüng: ‚ÄúHay l√† m√¨nh ch·ªçn m·ªôt ng√†nh g√¨ ƒë√≥ li√™n quan ƒë·∫øn m√°y t√≠nh?‚Äù`,
      `T·ª´ s·ª± t√≤ m√≤ ƒë√≥, m√¨nh b·∫Øt ƒë·∫ßu l√™n YouTube t√¨m hi·ªÉu. V√† r·ªìi, ng√†nh C√¥ng ngh·ªá th√¥ng tin xu·∫•t hi·ªán nh∆∞ m·ªôt l·ªùi gi·∫£i ƒë√°p. N√≥ ƒë√∫ng v·ªõi nh·ªØng g√¨ m√¨nh t∆∞·ªüng t∆∞·ª£ng: ƒë∆∞·ª£c l√†m vi·ªác v·ªõi m√°y t√≠nh, ƒë∆∞·ª£c ti·∫øp x√∫c v·ªõi c√¥ng ngh·ªá m·ªõi, v√† c√≥ c∆° h·ªôi kh√°m ph√° m·ªôt th·∫ø gi·ªõi r·ªông l·ªõn.`,
      `Sau 4 nƒÉm h·ªçc t·∫≠p, m√¨nh c√†ng tin t∆∞·ªüng h∆°n v√†o l·ª±a ch·ªçn c·ªßa m√¨nh. ƒê√¢y l√† m·ªôt ng√†nh mang ƒë·∫≠m t√≠nh s√°ng t·∫°o v√† ƒë√≤i h·ªèi s·ª± h·ªçc h·ªèi kh√¥ng ng·ª´ng. M√¨nh th√≠ch ƒëi·ªÅu ƒë√≥, b·ªüi m·ªói ng√†y ƒë·ªÅu l√† m·ªôt c∆° h·ªôi ƒë·ªÉ kh√°m ph√° th√™m ƒëi·ªÅu m·ªõi m·∫ª.`,
      `T·∫•t nhi√™n, h√†nh tr√¨nh kh√¥ng ph·∫£i l√∫c n√†o c≈©ng d·ªÖ d√†ng. Khi m·ªõi ra tr∆∞·ªùng, m√¨nh t·ª´ng c·∫£m th·∫•y kh√≥ khƒÉn trong vi·ªác t√¨m vi·ªác l√†m, th·∫≠m ch√≠ ƒë√¥i l√∫c t·ª± h·ªèi: ‚ÄúLi·ªáu m√¨nh c√≥ ch·ªçn ƒë√∫ng ng√†nh kh√¥ng?‚Äù Th·ª±c t·∫ø, ƒëi l√†m t·∫°i c√°c c√¥ng ty lu√¥n c√≥ c·∫£ √°p l·ª±c l·∫´n ni·ªÅm vui. Nh∆∞ng ch√≠nh nh·ªØng √°p l·ª±c ·∫•y l·∫°i tr·ªü th√†nh ƒë·ªông l·ª±c, gi√∫p m√¨nh ki√™n tr√¨ b∆∞·ªõc ti·∫øp.`,
      `M·∫∑c d√π hi·ªán t·∫°i ch∆∞a ƒë·∫°t ƒë∆∞·ª£c t·∫•t c·∫£ nh·ªØng g√¨ m√¨nh mong ƒë·ª£i, nh∆∞ng m√¨nh v·∫´n tin r·∫±ng l·ª±a ch·ªçn ng√†nh C√¥ng ngh·ªá th√¥ng tin l√† ƒë√∫ng ƒë·∫Øn. B·ªüi h∆°n h·∫øt, c√¥ng vi·ªác n√†y mang l·∫°i cho m√¨nh ni·ªÅm vui, v√† m√¨nh bi·∫øt b·∫£n th√¢n v·∫´n mu·ªën g·∫Øn b√≥ v·ªõi n√≥ l√¢u d√†i.`,
    ],
    status: true,
  },
  {
    id: 2,
    img: "assets/img/anhsn.jpg",
    date: "1",
    month: "Aug",
    category: "T·ª± s·ª±",
    title: "Sinh nh·∫≠t tu·ªïi 23, m·ªôt ng√†y ƒë·∫∑c bi·ªát ƒë·ªëi v·ªõi m√¨nh ü•∞‚ù§Ô∏è",
    modalContent: [],
    status: false,
  },
];

interface BlogModalProps {
  isOpen: boolean;
  onClose: () => void;
  blog: Blog;
}

function BlogModal({ isOpen, onClose, blog }: BlogModalProps) {
  if (!isOpen) return null;
  return (
    <>
      {/* Overlay */}
      <div className="fixed inset-0 z-40 bg-black/70" onClick={onClose}></div>

      {/* Modal content */}
      <div className="fixed inset-0 z-50 flex justify-center items-center">
        <div className="relative w-full h-full sm:w-[90%] sm:h-[90%] max-w-[968px] bg-white dark:bg-[#34353a] rounded-none sm:rounded-xl overflow-y-auto">
          {/* Header */}
          <div className="flex items-center justify-between px-4 sm:px-8 py-4 border-b border-gray-200 dark:border-gray-700 sticky top-0 bg-white dark:bg-[#34353a] z-10">
            <h3 className="text-lg sm:text-xl md:text-2xl font-semibold">
              Chi ti·∫øt
            </h3>
            <button className="ml-auto" onClick={onClose}>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                className="w-6 h-6 sm:w-7 sm:h-7 dark:stroke-white stroke-dark"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          {/* Body */}
          <div className="px-4 sm:px-8 py-6">
            <img
              src={blog.img}
              alt=""
              className="h-[200px] sm:h-[300px] md:h-[350px] w-full object-cover rounded-lg"
            />
            <h3 className="text-custom2 mt-6 text-xl sm:text-2xl md:text-3xl font-medium">
              {blog.title}
            </h3>
            <p className="font-secondary text-muted dark:text-darkmuted mt-1 text-sm sm:text-base">
              {blog.category}
            </p>
            <div className="mt-5 space-y-4 sm:space-y-5">
              {blog.modalContent.map((p, i) => (
                <p
                  key={i}
                  className="text-muted dark:text-darkmuted text-sm sm:text-base leading-relaxed"
                >
                  {p}
                </p>
              ))}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

interface BlogCardProps {
  blog: Blog;
  onClick: () => void;
}

function BlogCard({ blog, onClick }: BlogCardProps) {
  return (
    <div className="wow fadeInUp cursor-pointer" data-wow-duration="1s">
      <div onClick={onClick}>
        <div className="overflow-hidden group rounded-xl relative h-[303px]">
          <img
            src={blog.img}
            alt=""
            className="rounded-xl object-cover w-full h-full scale-100 duration-300 group-hover:scale-110"
          />
          <div className="bg-[#1cbe59] top-[18px] right-[18px] absolute rounded-xl text-center py-3 px-5">
            <h3 className="text-2xl text-white leading-[1.2]">{blog.date}</h3>
            <span className="text-white text-sm">{blog.month}</span>
          </div>
        </div>
        <div className="mt-5">
          <p className="text-custom font-medium font-secondary">
            <a href="#">{blog.category}</a>
          </p>
          <h4 className="mt-1 leading-[1.4] text-[21px]">
            <a href="#" className="text-custom2 hover:text-custom">
              {blog.title}
            </a>
          </h4>
        </div>
      </div>
    </div>
  );
}

export default function BlogSection() {
  const [selectedBlog, setSelectedBlog] = useState<Blog | null>(null);

  return (
    <section
      className="md:pt-[185px] pt-[120px] pb-[100px] md:pb-[160px] relative"
      id="blog"
    >
      <div className="container relative z-10">
        <div className="grid grid-cols-1">
          <div className="text-center max-w-[680px] mx-auto">
            <p className="text-custom text-[20px] md:text-2xl font-medium font-secondary">
              Blog c·ªßa m√¨nh
            </p>
            <h2 className="text-custom2 md:text-[48px] text-[35px] leading-[1.25] mb-[23px] mt-1.5">
              Nh·ªØng b√†i vi·∫øt m·ªõi nh·∫•t
            </h2>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 pt-[65px] gap-[25px]">
          {blogData.map((blog) => (
            <BlogCard
              key={blog.id}
              blog={blog}
              onClick={() => {
                if (!blog.status) {
                  alert("C·∫ßn ph·∫£i c√≥ quy·ªÅn ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p");
                  return;
                }
                setSelectedBlog(blog);
              }}
            />
          ))}
        </div>
      </div>

      {/* Decorative Images */}
      <div
        className="top-[250px] left-[115px] absolute hidden lg:block wow zoomIn"
        data-wow-duration="1s"
      >
        <img src="assets/img/brushes/news/1.png" alt="" />
      </div>
      <div
        className="top-0 right-0 absolute hidden lg:block wow zoomIn"
        data-wow-duration="1s"
      >
        <img src="assets/img/brushes/news/2.png" alt="" />
      </div>

      {/* Modal */}
      {selectedBlog && (
        <BlogModal
          isOpen={!!selectedBlog}
          blog={selectedBlog}
          onClose={() => setSelectedBlog(null)}
        />
      )}
    </section>
  );
}
